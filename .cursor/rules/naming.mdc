---
description: Naming Specifications
globs:
alwaysApply: false
---

# 命名规范

## 基本原则

- 语义化命名：要求通过名称直接反映相关模块业务、或组件的功能和用途。
- 简洁性原则：在确保语义清晰的基础上，尽量使名称简洁明了，避免冗长复杂的名称。
- 统一性原则：在同一个项目、文件夹、子包中，遵循统一的命名风格。

## 文件夹命名 & 文件命名

除"组件命名"与"Hooks"命名外，所有文件夹、文件命名均要遵循如下规则：

- 必须使用小写
- 命名称尽量避免使用超过三个单词以上的命名
- 如有超过2个以上单词的名称，需要在中间使用中横线隔开，如："system-config"


## Hooks命名

- 前缀必须写"use"
- 后缀为对应功能名称
- 通用功能使用大驼峰命名,例如："useCopyToClipboard"
- 业务功能使用小写中横线命名法，如："use-requery"

## 组件命名
- 组件名使用大驼峰（PascalCase）
- 属性名使用小驼峰（camelCase）

### Props
* Initialize prop: `default` + `PropName`
* Force render: `forceRender`
  * Force render sub component: `force` + `Sub Component Name` + `Render`
* Sub Component Render: `Sub Component Name` + `Render`. e.g.
> panelRender(originNode, info: { SubComponent1, SubComponent2, [somePassedProps]: someValue })
* Sub Item Render: `Sub Item Name` + `Render`. e.g.
> cellRender(date, info: { [somePassedProps]: someValue })
* Data Source: `dataSource`
* Panel open: popup & dropdown `open`, additional popup `popupName` + `Open` like `tooltipOpen`
  * Do not use `visible` to make sure all the visible api align
* `children`:
  * Mainly display content. To avoid additional prop name.
  * Option list like `Select.Option` or `Tree.TreeNode`.
  * Customize wrapped component can consider use `component` prop if `children` may have other usage in future.
* Display related naming: `show` + `PropName`
* Functional: `PropName` + `able`
* Disable: `disabled`
  * sub component: `disabled` + `Sub Component Name`
* Extra: `extra`
  * sub component: `Sub Component Name` + `extra`. e.g. `titleExtra`
* mainly icon: `icon`
  * Merge with function first: `functionName: { icon }`. e.g. `expandable: { icon: <Smile /> }`
  * Multiple icons: `FunctionName` + `Icon`
* Trigger: `trigger`
  * Sub function trigger: `Sub Function` + `Trigger`
  * Trigger on the time point: `xxx` + `On` + `EventName` (e.g. `destroyOnHidden`)
* Component use other component config. Naming as component.(e.g. `<Table pagination={{...}} />`)
* ClassName: `className`
  * Additional classes should be merged into `classes` (e.g. `<Button classes={{ inner: 'custom-inner' }} />`)
* Format
  * Not modify value when blur: `preserveInvalidOnBlur`

### Event
* Trigger event: `on` + `EventName`
  * Trigger sub component event: `on` + `SubComponentName` + `EventName` (e.g.`onSearchChange`)
  * Trigger prop event: `on` + `PropName` + `EventName` (e.g.`onDragStart`)
* Before trigger event: `before` + `EventName`
* After trigger event: `after` + `EventName`
* After continuous action, such as drag Slider: `on` + `EventName` + `Complete`
